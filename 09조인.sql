SELECT * FROM INFO;
SELECT * FROM AUTH;

--INNER JOIN (붙을 수 있는 데이터가 없으면 안나옴)
--AUTH_ID는 양쪽 테이블에 모두 존재하기 때문에 SELECT에서 테이블명을 함께 적어줘야 한다.
SELECT ID,
       TITLE,
       INFO.AUTH_ID,
       NAME
FROM INFO INNER JOIN AUTH ON info.auth_id = auth.auth_id;

--INNER JOIN USING
SELECT *
FROM INFO
INNER JOIN AUTH
USING (AUTH_ID);

--OUTER JOIN
--LEFT OUTER JOIN
SELECT * FROM INFO I LEFT OUTER JOIN AUTH A ON I.AUTH_ID = a.auth_id;

--RIGHT OUTER JOIN
SELECT * FROM INFO I RIGHT OUTER JOIN AUTH A ON I.AUTH_ID = A.AUTH_ID ORDER BY ID;
SELECT * FROM AUTH A LEFT OUTER JOIN INFO I ON A.AUTH_ID = I.AUTH_ID ORDER BY ID;
--FULL OUTER JOIN : 양쪽테이블의 모든 데이터가 유실되지 않고 합쳐진다.
SELECT * FROM INFO I FULL OUTER JOIN AUTH A ON I.AUTH_ID = A.AUTH_ID ORDER BY ID;

--CROSS JOIN (잘못된 조인의 형태)
SELECT * FROM INFO I CROSS JOIN AUTH A;

--------------------------------------------------------------------------------
SELECT * FROM EMPLOYEES;
SELECT * FROM DEPARTMENTS;
SELECT * FROM LOCATIONS;

SELECT * FROM EMPLOYEES E INNER JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

SELECT * FROM EMPLOYEES E LEFT JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
                          LEFT JOIN LOCATIONS L ON D.LOCATION_ID = L.LOCATION_ID;

--SELF JOIN : 카테고리 형태에 많이 쓰임
SELECT * FROM EMPLOYEES;
SELECT E1.*, E2.FIRST_NAME AS 상급자 --E1테이블 컬럼 전부 + E2테이블의 FIRST_NAME 컬럼만
FROM EMPLOYEES E1 LEFT JOIN EMPLOYEES E2 ON E1.MANAGER_ID = E2.EMPLOYEE_ID;

--------------------------------------------------------------------------------
--오라클 조인
--FROM 절 아래에 테이블을 나열, WHERE에 JOIN의 조건을 쓴다.

--INNER JOIN
SELECT * FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID;



















